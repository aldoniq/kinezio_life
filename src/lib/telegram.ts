import TelegramBot from 'node-telegram-bot-api';
import { Appointment } from '@/types';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '';
const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '';

let bot: TelegramBot | null = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
function initBot() {
  if (!BOT_TOKEN) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return null;
  }
  
  if (!bot) {
    bot = new TelegramBot(BOT_TOKEN, { polling: false });
  }
  
  return bot;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(message: string): Promise<boolean> {
  try {
    const telegramBot = initBot();
    
    if (!telegramBot || !CHAT_ID) {
      console.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    await telegramBot.sendMessage(CHAT_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    return false;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateStr: string): string {
  const date = new Date(dateStr);
  return date.toLocaleDateString('ru-RU', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
export async function notifyNewAppointment(appointment: Appointment): Promise<boolean> {
  const message = `
üÜï <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É!</b>

üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> ${appointment.patientName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${appointment.patientPhone}

üè• <b>–£—Å–ª—É–≥–∞:</b> ${appointment.serviceType.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${appointment.serviceType.description}
‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${appointment.serviceType.duration} –º–∏–Ω
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${appointment.serviceType.price.toLocaleString('kk-KZ')} ‚Ç∏

üìÖ <b>–î–∞—Ç–∞:</b> ${formatDate(appointment.date)}
üïê <b>–í—Ä–µ–º—è:</b> ${appointment.time}

${appointment.problemDescription ? `üí¨ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n${appointment.problemDescription}\n` : ''}

üìã <b>ID –∑–∞–ø–∏—Å–∏:</b> ${appointment.id}
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> ${new Date(appointment.createdAt).toLocaleString('ru-RU')}
  `.trim();

  return await sendMessage(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
export async function notifyCancelledAppointment(appointment: Appointment): Promise<boolean> {
  const message = `
‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> ${appointment.patientName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${appointment.patientPhone}

üè• <b>–£—Å–ª—É–≥–∞:</b> ${appointment.serviceType.name}
üìÖ <b>–î–∞—Ç–∞:</b> ${formatDate(appointment.date)}
üïê <b>–í—Ä–µ–º—è:</b> ${appointment.time}

üìã <b>ID –∑–∞–ø–∏—Å–∏:</b> ${appointment.id}
  `.trim();

  return await sendMessage(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function notifyDailyStats(stats: {
  date: string;
  totalAppointments: number;
  newAppointments: number;
  cancelledAppointments: number;
  totalRevenue: number;
}): Promise<boolean> {
  const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${formatDate(stats.date)}</b>

üìà <b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</b> ${stats.totalAppointments}
üÜï <b>–ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:</b> ${stats.newAppointments}
‚ùå <b>–û—Ç–º–µ–Ω–µ–Ω–æ:</b> ${stats.cancelledAppointments}
üí∞ <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> ${stats.totalRevenue.toLocaleString('kk-KZ')} ‚Ç∏
  `.trim();

  return await sendMessage(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
export function isTelegramConfigured(): boolean {
  return !!(BOT_TOKEN && CHAT_ID);
} 